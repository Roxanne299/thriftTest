// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "match_server/Match.h"
#include "save_client/Save.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include<iostream>
#include<thread>
#include<mutex>
#include<condition_variable>
#include<queue>
#include <thrift/transport/TTransportUtils.h>
#include<vector>
#include <thrift/transport/TSocket.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using namespace std;
using namespace  ::match_service;
using namespace ::save_service;

struct Task
{
    User user;
    string type;
};

struct MessageQueue
{
    queue<Task> q;
    mutex m;
    condition_variable cv;
}message_queue;

class Pool
{
    //玩家池
    public:
        void save_result(int a,int b)
        {

            printf("Match result: %d %d\n", a, b);
            std::shared_ptr<TTransport> socket(new TSocket("123.57.47.211", 9090));
            std::shared_ptr<TTransport> transport(new TBufferedTransport(socket));
            std::shared_ptr<TProtocol> protocol(new TBinaryProtocol(transport));
            SaveClient client(protocol);

            try {
                transport->open();
                
                a = client.save_data("acs_5594","52a4ae67",a,b);
                if(a) puts("success");
                else puts("failed");
                puts("i am here");
                transport->close();
            } catch (TException& tx) {
                cout << "ERROR: " << tx.what() << endl;
            }
        }
        void match()
        {
            while (users.size() > 1)
            {
                auto a = users[0],b = users[1];
                users.erase(users.begin());
                users.erase(users.begin());

                save_result(a.id,b.id);
            }
        }
        void add(User user)
        {
            users.push_back(user);
        }

        void remove(User user)
        {
            for(uint32_t i = 0;i < users.size(); i ++ )
            {
                if(users[i].id == user.id)
                {
                    users.erase(users.begin() + i);
                    break;
                }
            }
        }
    private:
        vector<User> users;

}pool;


class MatchHandler : virtual public MatchIf {
    public:
        MatchHandler() {
            // Your initialization goes here
        }

        int32_t add_user(const User& user, const std::string& info) {
            // Your implementation goes here
            unique_lock<mutex> lck(message_queue.m);
            message_queue.q.push({user,"add"});
            printf("add_user\n");
            message_queue.cv.notify_all();
            return 0;
        }

        int32_t remove_user(const User& user, const std::string& info) {
            // Your implementation goes here
            unique_lock<mutex> lck(message_queue.m);
            message_queue.q.push({user,"remove"});
            printf("remove_user\n");
            message_queue.cv.notify_all();
            return 0;
        }

};

void consume_task()
{
    while(true)
    {   
        unique_lock<mutex> lck(message_queue.m);
        if(message_queue.q.empty())
        {
            message_queue.cv.wait(lck);
            pool.match();
           continue;
        }
        else
        {
            auto task = message_queue.q.front();
            message_queue.q.pop();
            lck.unlock();//可以在执行数据的时候添加删除用户，不用等太久
            //处理数据
            if(task.type == "add") pool.add(task.user);
            else if (task.type == "remove") pool.remove(task.user);
            pool.match();
        }
    }
}

int main(int argc, char **argv) {
    int port = 9090;
    ::apache::thrift::stdcxx::shared_ptr<MatchHandler> handler(new MatchHandler());
    ::apache::thrift::stdcxx::shared_ptr<TProcessor> processor(new MatchProcessor(handler));
    ::apache::thrift::stdcxx::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
    ::apache::thrift::stdcxx::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
    ::apache::thrift::stdcxx::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

    TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);

    cout<<"start match server"<<endl;

    thread matching_thread(consume_task);

    server.serve();
    return 0;
}

